#!/bin/bash

# Claude Switch - Profile Management for Claude Code
# Manages multiple Claude API configurations with secure keychain storage

set -e

# Get the directory where the script is located
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
LIB_DIR="$SCRIPT_DIR/lib"

# Source all library modules
source "$LIB_DIR/ui.sh"
source "$LIB_DIR/config.sh"
source "$LIB_DIR/validation.sh"
source "$LIB_DIR/api.sh"
source "$LIB_DIR/core.sh"
source "$LIB_DIR/wizard.sh"

# Version
VERSION="2.0.0"

# Initialize configuration directories
init_config_dirs

# Display help message
show_help() {
    cat << EOF
Claude Switch v$VERSION - Profile Management for Claude Code

Usage: claude-switch [COMMAND] [OPTIONS]

Commands:
  setup                    Run interactive setup wizard
  create <name>            Create a new profile interactively
  switch <name>            Switch to a profile
  list                     List all profiles
  status                   Show current profile and configuration
  delete <name>            Delete a profile
  rename <old> <new>       Rename a profile

  model list               List available models from LiteLLM
  model set <model>        Update model for current profile
  model current            Show current model

  doctor                   Run diagnostics and health checks
  uninstall                Uninstall claude-switch from your system
  version                  Show version information
  help                     Show this help message

Options:
  --skip-validation        Skip API validation when switching profiles
  --verbose                Show detailed output
  --json                   Output in JSON format

Examples:
  claude-switch setup              # Run first-time setup wizard
  claude-switch create work        # Create a new 'work' profile
  claude-switch switch personal    # Switch to 'personal' profile
  claude-switch list               # Show all profiles
  claude-switch status             # Show current configuration
  claude-switch model list         # List available models

For more information, visit: https://github.com/yourusername/claude-switch
EOF
}

# Display version
show_version() {
    echo "claude-switch version $VERSION"
}

# List all profiles
list_all_profiles() {
    local profiles
    profiles=$(list_profiles)

    if [ -z "$profiles" ]; then
        print_info "No profiles found. Run 'claude-switch setup' to create your first profile."
        return 0
    fi

    local active
    active=$(get_active_profile)

    print_header "Available Profiles"

    print_table_header "Profile" "Model" "Last Used"

    echo "$profiles" | while read -r profile; do
        if [ -z "$profile" ]; then
            continue
        fi

        local info
        info=$(get_profile_info "$profile" 2>/dev/null)

        if [ -z "$info" ]; then
            continue
        fi

        local model last_used is_active
        model=$(echo "$info" | jq -r '.model // "N/A"')
        last_used=$(echo "$info" | jq -r '.last_used // "N/A"')

        if [ "$profile" = "$active" ]; then
            is_active="true"
        else
            is_active="false"
        fi

        print_table_row "$profile" "$model" "$last_used" "$is_active"
    done

    echo ""
    print_info "Current profile: ${active:-none}"
}

# Show status
show_status() {
    local active
    active=$(get_active_profile)

    if [ -z "$active" ]; then
        print_warning "No active profile set"
        print_info "Run 'claude-switch setup' to get started"
        return 0
    fi

    print_header "Current Configuration"

    local info
    info=$(get_profile_info "$active")

    if [ -z "$info" ]; then
        print_error "Failed to retrieve profile information"
        return 1
    fi

    local model base_url created last_used description api_key_status
    model=$(echo "$info" | jq -r '.model')
    base_url=$(echo "$info" | jq -r '.base_url')
    created=$(echo "$info" | jq -r '.created')
    last_used=$(echo "$info" | jq -r '.last_used')
    description=$(echo "$info" | jq -r '.description')
    api_key_status=$(echo "$info" | jq -r '.api_key_status')

    print_info "Profile:     $active"
    print_info "Description: ${description:-N/A}"
    print_info "Model:       $model"
    print_info "Base URL:    $base_url"
    print_info "API Key:     $api_key_status"
    print_info "Created:     $created"
    print_info "Last Used:   $last_used"
    echo ""

    # Test API connection
    print_info "Testing API connection..."
    local api_key
    api_key=$(keychain_retrieve "$active")

    if [ $? -eq 0 ]; then
        if test_api_health "$api_key" "$base_url" 5; then
            print_success "API connection: healthy"
        else
            print_error "API connection: failed"
        fi
    else
        print_error "API key not found in keychain"
    fi
}

# Run doctor diagnostics
run_doctor() {
    print_header "Running Diagnostics"

    local errors=0

    # Check configuration directories
    print_info "Checking configuration directories..."
    if [ -d "$CLAUDE_CONFIG_DIR" ]; then
        print_success "Claude config directory exists: $CLAUDE_CONFIG_DIR"
    else
        print_error "Claude config directory missing: $CLAUDE_CONFIG_DIR"
        ((errors++))
    fi

    if [ -d "$PROFILES_DIR" ]; then
        print_success "Profiles directory exists: $PROFILES_DIR"
    else
        print_error "Profiles directory missing: $PROFILES_DIR"
        ((errors++))
    fi

    # Check for profiles
    print_info "Checking profiles..."
    local profiles
    profiles=$(list_profiles)

    if [ -z "$profiles" ]; then
        print_warning "No profiles found"
    else
        local count
        count=$(echo "$profiles" | wc -l | tr -d ' ')
        print_success "Found $count profile(s)"

        # Check each profile
        echo "$profiles" | while read -r profile; do
            if [ -z "$profile" ]; then
                continue
            fi

            print_info "  Checking profile: $profile"

            # Check config file
            local config_file
            config_file=$(get_profile_config "$profile")
            if [ -f "$config_file" ]; then
                print_success "    Config file exists"
            else
                print_error "    Config file missing"
            fi

            # Check metadata file
            local metadata_file
            metadata_file=$(get_profile_metadata "$profile")
            if [ -f "$metadata_file" ]; then
                print_success "    Metadata file exists"
            else
                print_error "    Metadata file missing"
            fi

            # Check keychain
            if keychain_exists "$profile"; then
                print_success "    API key stored in keychain"
            else
                print_error "    API key missing from keychain"
            fi
        done
    fi

    # Check active profile
    print_info "Checking active profile..."
    local active
    active=$(get_active_profile)

    if [ -z "$active" ]; then
        print_warning "No active profile set"
    else
        print_success "Active profile: $active"

        if profile_exists "$active"; then
            print_success "Active profile exists"
        else
            print_error "Active profile does not exist!"
            ((errors++))
        fi
    fi

    # Check dependencies
    print_info "Checking dependencies..."

    if command -v jq > /dev/null 2>&1; then
        print_success "jq is installed"
    else
        print_error "jq is not installed"
        ((errors++))
    fi

    if command -v curl > /dev/null 2>&1; then
        print_success "curl is installed"
    else
        print_error "curl is not installed"
        ((errors++))
    fi

    if command -v security > /dev/null 2>&1; then
        print_success "macOS security command is available"
    else
        print_error "macOS security command not found (keychain access unavailable)"
        ((errors++))
    fi

    echo ""
    if [ $errors -eq 0 ]; then
        print_success "All diagnostics passed!"
    else
        print_error "Found $errors error(s)"
        return 1
    fi
}

# Handle model commands
handle_model_command() {
    local subcommand="$1"
    shift

    local active
    active=$(get_active_profile)

    if [ -z "$active" ]; then
        print_error "No active profile. Switch to a profile first."
        return 1
    fi

    local api_key base_url
    api_key=$(keychain_retrieve "$active")
    if [ $? -ne 0 ]; then
        print_error "Failed to retrieve API key from keychain"
        return 1
    fi

    base_url=$(get_config_value "$active" "base_url")

    case "$subcommand" in
        list)
            print_header "Available Models"

            local models
            models=$(get_model_ids "$api_key" "$base_url")

            if [ $? -ne 0 ] || [ -z "$models" ]; then
                print_error "Failed to fetch models from API"
                return 1
            fi

            local current_model
            current_model=$(get_config_value "$active" "model")

            echo "$models" | while read -r model; do
                if [ "$model" = "$current_model" ]; then
                    print_success "â†’ $model (current)"
                else
                    echo "  $model"
                fi
            done
            ;;

        current)
            local model
            model=$(get_config_value "$active" "model")
            print_info "Current model: $model"
            ;;

        set)
            local new_model="$1"

            if [ -z "$new_model" ]; then
                print_error "Model name required. Usage: claude-switch model set <model>"
                return 1
            fi

            print_info "Validating model..."

            if ! validate_model_exists "$new_model" "$api_key" "$base_url"; then
                print_warning "Model '$new_model' not found in available models"

                if ! prompt_confirm "Do you want to use this model anyway?"; then
                    print_info "Model update cancelled"
                    return 0
                fi
            fi

            if update_profile_model "$active" "$new_model"; then
                print_success "Model updated to: $new_model"
            else
                print_error "Failed to update model"
                return 1
            fi
            ;;

        *)
            print_error "Unknown model subcommand: $subcommand"
            print_info "Available subcommands: list, current, set"
            return 1
            ;;
    esac
}

# Main command handler
main() {
    local command="$1"
    shift

    # Check for first-time setup
    if [ -z "$command" ] || [ "$command" = "help" ]; then
        show_help
        return 0
    fi

    # Check if no profiles exist and command is not setup
    local profiles
    profiles=$(list_profiles)

    if [ -z "$profiles" ] && [ "$command" != "setup" ] && [ "$command" != "version" ] && [ "$command" != "help" ] && [ "$command" != "doctor" ]; then
        print_warning "No profiles found. Running setup wizard..."
        echo ""
        run_setup_wizard
        return $?
    fi

    case "$command" in
        setup)
            run_setup_wizard
            ;;

        create)
            local profile_name="$1"
            if [ -z "$profile_name" ]; then
                create_profile_interactive
            else
                # TODO: Add non-interactive creation
                print_error "Non-interactive profile creation not yet implemented"
                print_info "Use 'claude-switch create' without arguments for interactive mode"
                return 1
            fi
            ;;

        switch)
            local profile_name="$1"
            local skip_validation="false"

            # Check for flags
            if [ "$2" = "--skip-validation" ] || [ "$1" = "--skip-validation" ]; then
                skip_validation="true"
            fi

            # If no profile name provided, show interactive menu
            if [ -z "$profile_name" ] || [ "$profile_name" = "--skip-validation" ]; then
                # Get list of profiles
                local profiles
                profiles=$(list_profiles)

                if [ -z "$profiles" ]; then
                    print_error "No profiles found. Create one with 'claude-switch create'"
                    return 1
                fi

                # Convert to array
                local profile_array=()
                while IFS= read -r profile; do
                    if [ -n "$profile" ]; then
                        # Mark active profile
                        local active
                        active=$(get_active_profile)
                        if [ "$profile" = "$active" ]; then
                            profile_array+=("$profile (active)")
                        else
                            profile_array+=("$profile")
                        fi
                    fi
                done <<< "$profiles"

                # Show interactive menu
                profile_name=$(select_from_menu "Select profile to switch to:" "${profile_array[@]}")

                if [ $? -ne 0 ] || [ -z "$profile_name" ]; then
                    print_info "Switch cancelled"
                    return 0
                fi

                # Remove " (active)" suffix if present
                profile_name="${profile_name% (active)}"
            fi

            if switch_profile "$profile_name" "$skip_validation"; then
                print_success "Switched to profile: $profile_name"
            else
                return 1
            fi
            ;;

        list)
            list_all_profiles
            ;;

        status)
            show_status
            ;;

        delete)
            local profile_name="$1"

            # If no profile name provided, show interactive menu
            if [ -z "$profile_name" ]; then
                # Get list of profiles
                local profiles
                profiles=$(list_profiles)

                if [ -z "$profiles" ]; then
                    print_error "No profiles found"
                    return 1
                fi

                # Convert to array
                local profile_array=()
                while IFS= read -r profile; do
                    if [ -n "$profile" ]; then
                        # Mark active profile
                        local active
                        active=$(get_active_profile)
                        if [ "$profile" = "$active" ]; then
                            profile_array+=("$profile (active)")
                        else
                            profile_array+=("$profile")
                        fi
                    fi
                done <<< "$profiles"

                # Show interactive menu
                profile_name=$(select_from_menu "Select profile to delete:" "${profile_array[@]}")

                if [ $? -ne 0 ] || [ -z "$profile_name" ]; then
                    print_info "Deletion cancelled"
                    return 0
                fi

                # Remove " (active)" suffix if present
                profile_name="${profile_name% (active)}"
            fi

            print_warning "This will permanently delete profile '$profile_name' and its API key from keychain."

            if ! prompt_confirm "Are you sure?"; then
                print_info "Deletion cancelled"
                return 0
            fi

            if remove_profile "$profile_name"; then
                print_success "Profile '$profile_name' deleted"
            else
                return 1
            fi
            ;;

        rename)
            local old_name="$1"
            local new_name="$2"

            if [ -z "$old_name" ] || [ -z "$new_name" ]; then
                print_error "Both old and new names required. Usage: claude-switch rename <old> <new>"
                return 1
            fi

            if rename_profile_with_keychain "$old_name" "$new_name"; then
                print_success "Profile renamed from '$old_name' to '$new_name'"
            else
                return 1
            fi
            ;;

        model)
            handle_model_command "$@"
            ;;

        doctor)
            run_doctor
            ;;

        uninstall)
            # Run the uninstall script
            local script_dir
            script_dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

            if [ -f "$script_dir/uninstall.sh" ]; then
                bash "$script_dir/uninstall.sh"
            elif [ -f "/usr/local/lib/claude-switch/uninstall.sh" ]; then
                bash "/usr/local/lib/claude-switch/uninstall.sh"
            else
                print_error "Uninstall script not found"
                echo ""
                print_info "To manually uninstall:"
                echo "  sudo rm /usr/local/bin/claude-switch"
                echo "  sudo rm -rf /usr/local/lib/claude-switch"
                echo "  rm -rf ~/.claude/profiles"
                echo "  rm ~/.claude/settings.json"
                return 1
            fi
            ;;

        version)
            show_version
            ;;

        *)
            print_error "Unknown command: $command"
            echo ""
            show_help
            return 1
            ;;
    esac
}

# Run main with all arguments
main "$@"
